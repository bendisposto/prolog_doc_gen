/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexer;

import java.io.*;
import node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocStart(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocEnd(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDescr(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDate(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAuthor(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAtdoc(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 41, 1}, {42, 42, 6}, {43, 46, 1}, {47, 47, 7}, {48, 63, 1}, {64, 64, 8}, {65, 237, 1}, },
            {{0, 8, 9}, {9, 9, 10}, {10, 10, 11}, {11, 12, 9}, {13, 13, 12}, {14, 31, 9}, {32, 32, 13}, {33, 41, 9}, {42, 42, 14}, {43, 46, 9}, {47, 47, 14}, {48, 63, 9}, {65, 237, 9}, },
            {{0, 8, 9}, {9, 9, 15}, {10, 10, 3}, {11, 12, 9}, {13, 13, 16}, {14, 31, 9}, {32, 32, 17}, {33, 41, 9}, {42, 42, 18}, {43, 46, 9}, {47, 47, 19}, {48, 63, 9}, {64, 64, 8}, {65, 237, 9}, },
            {{0, 237, -2}, },
            {{0, 237, -4}, },
            {{0, 237, -4}, },
            {{47, 47, 20}, },
            {{42, 42, 21}, },
            {{65, 65, 22}, {66, 67, 23}, {68, 68, 24}, {69, 90, 23}, {97, 97, 25}, {98, 99, 26}, {100, 100, 27}, {101, 122, 26}, },
            {{0, 237, -3}, },
            {{0, 237, -3}, },
            {{9, 9, 28}, {10, 10, 11}, {13, 13, 29}, {32, 32, 30}, },
            {{0, 237, -3}, },
            {{0, 237, -3}, },
            {{0, 9, 31}, {11, 41, 31}, {42, 42, 14}, {43, 46, 31}, {47, 47, 14}, {48, 63, 31}, {65, 237, 31}, },
            {{0, 237, -4}, },
            {{0, 237, -4}, },
            {{0, 237, -4}, },
            {{0, 46, -16}, {47, 47, 32}, {48, 237, -16}, },
            {{0, 41, -16}, {42, 42, 33}, {43, 237, -16}, },
            {{9, 9, 34}, {10, 10, 35}, {13, 13, 36}, {32, 32, 37}, },
            {{42, 42, 38}, },
            {{9, 9, 39}, {10, 10, 40}, {13, 13, 41}, {32, 32, 42}, {65, 84, 23}, {85, 85, 43}, {86, 90, 23}, {97, 116, 26}, {117, 117, 44}, {118, 122, 26}, },
            {{9, 32, -24}, {65, 90, 23}, {97, 122, 26}, },
            {{9, 32, -24}, {65, 65, 45}, {66, 68, 23}, {69, 69, 46}, {70, 90, 23}, {97, 97, 47}, {98, 100, 26}, {101, 101, 48}, {102, 122, 26}, },
            {{9, 122, -24}, },
            {{9, 122, -25}, },
            {{9, 122, -26}, },
            {{9, 32, -13}, },
            {{9, 32, -13}, },
            {{9, 32, -13}, },
            {{0, 237, -3}, },
            {{0, 8, 31}, {9, 9, 49}, {10, 10, 35}, {11, 12, 31}, {13, 13, 50}, {14, 31, 31}, {32, 32, 51}, {33, 41, 31}, {42, 237, -16}, },
            {{0, 41, -16}, {42, 42, 52}, {43, 237, -16}, },
            {{9, 32, -22}, },
            {{9, 32, -22}, },
            {{9, 32, -22}, },
            {{9, 32, -22}, },
            {{9, 9, 53}, {10, 10, 54}, {13, 13, 55}, {32, 32, 56}, },
            {{9, 32, -24}, },
            {{9, 32, -24}, },
            {{9, 32, -24}, },
            {{9, 32, -24}, },
            {{9, 32, -24}, {65, 83, 23}, {84, 84, 57}, {85, 90, 23}, {97, 115, 26}, {116, 116, 58}, {117, 122, 26}, },
            {{9, 122, -45}, },
            {{9, 83, -45}, {84, 84, 59}, {85, 115, -45}, {116, 116, 60}, {117, 122, 26}, },
            {{9, 32, -24}, {65, 82, 23}, {83, 83, 61}, {84, 90, 23}, {97, 114, 26}, {115, 115, 62}, {116, 122, 26}, },
            {{9, 122, -47}, },
            {{9, 122, -48}, },
            {{0, 8, 9}, {9, 9, 63}, {10, 10, 64}, {11, 12, 9}, {13, 13, 65}, {14, 31, 9}, {32, 32, 66}, {33, 237, -3}, },
            {{0, 237, -51}, },
            {{0, 237, -51}, },
            {{0, 8, 31}, {9, 9, 67}, {10, 10, 54}, {11, 12, 31}, {13, 13, 68}, {14, 31, 31}, {32, 32, 69}, {33, 237, -34}, },
            {{9, 32, -40}, },
            {{9, 32, -40}, },
            {{9, 32, -40}, },
            {{9, 32, -40}, },
            {{9, 32, -24}, {65, 71, 23}, {72, 72, 70}, {73, 90, 23}, {97, 103, 26}, {104, 104, 71}, {105, 122, 26}, },
            {{9, 122, -59}, },
            {{9, 32, -24}, {65, 68, 23}, {69, 69, 72}, {70, 90, 23}, {97, 100, 26}, {101, 101, 73}, {102, 122, 26}, },
            {{9, 122, -61}, },
            {{9, 32, -24}, {65, 66, 23}, {67, 67, 74}, {68, 90, 23}, {97, 98, 26}, {99, 99, 75}, {100, 122, 26}, },
            {{9, 122, -63}, },
            {{0, 237, -51}, },
            {{9, 9, 76}, {10, 10, 64}, {13, 13, 77}, {32, 32, 78}, },
            {{0, 237, -51}, },
            {{0, 237, -51}, },
            {{0, 8, 9}, {9, 9, 79}, {10, 10, 80}, {11, 12, 9}, {13, 13, 81}, {14, 31, 9}, {32, 32, 82}, {33, 237, -3}, },
            {{0, 237, -69}, },
            {{0, 237, -69}, },
            {{9, 32, -24}, {65, 78, 23}, {79, 79, 83}, {80, 90, 23}, {97, 110, 26}, {111, 111, 84}, {112, 122, 26}, },
            {{9, 122, -72}, },
            {{9, 9, 85}, {10, 10, 86}, {13, 13, 87}, {32, 32, 88}, {65, 122, -25}, },
            {{9, 122, -74}, },
            {{9, 32, -24}, {65, 81, 23}, {82, 82, 89}, {83, 90, 23}, {97, 113, 26}, {114, 114, 90}, {115, 122, 26}, },
            {{9, 122, -76}, },
            {{9, 32, -66}, },
            {{9, 32, -66}, },
            {{9, 32, -66}, },
            {{0, 237, -69}, },
            {{9, 9, 91}, {10, 10, 80}, {13, 13, 92}, {32, 32, 93}, },
            {{0, 237, -69}, },
            {{0, 237, -69}, },
            {{9, 81, -76}, {82, 82, 94}, {83, 113, -76}, {114, 114, 95}, {115, 122, 26}, },
            {{9, 122, -85}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{9, 32, -74}, },
            {{9, 9, 96}, {10, 10, 97}, {13, 13, 98}, {32, 32, 99}, {65, 72, 23}, {73, 73, 100}, {74, 90, 23}, {97, 104, 26}, {105, 105, 101}, {106, 122, 26}, },
            {{9, 122, -91}, },
            {{9, 32, -82}, },
            {{9, 32, -82}, },
            {{9, 32, -82}, },
            {{9, 9, 102}, {10, 10, 103}, {13, 13, 104}, {32, 32, 105}, {65, 122, -25}, },
            {{9, 122, -96}, },
            {{9, 32, -91}, },
            {{9, 32, -91}, },
            {{9, 32, -91}, },
            {{9, 32, -91}, },
            {{9, 32, -24}, {65, 79, 23}, {80, 80, 106}, {81, 90, 23}, {97, 111, 26}, {112, 112, 107}, {113, 122, 26}, },
            {{9, 122, -102}, },
            {{9, 32, -96}, },
            {{9, 32, -96}, },
            {{9, 32, -96}, },
            {{9, 32, -96}, },
            {{9, 83, -45}, {84, 84, 108}, {85, 115, -45}, {116, 116, 109}, {117, 122, 26}, },
            {{9, 122, -108}, },
            {{9, 32, -24}, {65, 72, 23}, {73, 73, 110}, {74, 104, -91}, {105, 105, 111}, {106, 122, 26}, },
            {{9, 122, -110}, },
            {{9, 78, -72}, {79, 79, 112}, {80, 110, -72}, {111, 111, 113}, {112, 122, 26}, },
            {{9, 122, -112}, },
            {{9, 32, -24}, {65, 77, 23}, {78, 78, 114}, {79, 90, 23}, {97, 109, 26}, {110, 110, 115}, {111, 122, 26}, },
            {{9, 122, -114}, },
            {{9, 32, -91}, {65, 122, -25}, },
            {{9, 122, -116}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {6, 6, 6, 6, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, -1, 6, 6, 6, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, 1, -1, 1, 1, 1, 1, 0, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 1, 1, 1, 0, 0, 0, 0, -1, -1, 3, 3, 3, 3, -1, -1, 0, 0, 0, -1, -1, 2, 2, 2, 2, -1, -1, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
