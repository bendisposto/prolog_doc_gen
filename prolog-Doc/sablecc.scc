Helpers
	
	letter 		= (['a'..'z']|['A'..'Z']| '_');
	
	doc_start_comment = '/**';
	normal_comment = '/*';
	end_comment	  =	'*/';

	at 	= 	64;
	a 	= 	['a' + 'A'];
	b 	= 	['b'+ 'B'];
	c 	= 	['c'+'C'];
	d 	= 	['d'+'D'];
	e 	= 	['e'+'E'];
	f 	= 	['f'+'F'];
	g 	= 	['g'+'G'];
	h 	= 	['h'+'H'];
	i 	= 	['i'+'I'];
	j 	= 	['j'+'J'];
	k 	= 	['k'+'K'];
	l 	= 	['l'+'L'];
	m 	= 	['m'+'M'];
	n 	= 	['n'+'N'];
	o 	= 	['o'+'O'];
	p 	= 	['p'+'P'];
	q 	= 	['q'+'Q'];
	r 	= 	['r'+'R'];
	s 	= 	['s'+'S'];
	t 	= 	['t'+'T'];
	u 	= 	['u'+'U'];
	v 	= 	['v'+'V'];
	w 	= 	['w'+'W'];
	x 	= 	['x'+'X'];
	y 	= 	['y'+'Y'];
	z 	= 	['z'+'Z'];

	whitespace		= (' '| 10 | 13 | 9)+;
	ops				= (' '| 10 | 13 | 9)*;
	nl 				= 10;

	anynl		 = 	[0..237];
	any			 = [anynl -10];
	any_no_at	= [anynl -64];
	
	any_no_single_tick = [ anynl - 39];
	any_no_double_tick = [ anynl - 34];
	any_no_star = [ anynl - 42];
	any_no_slash_no_star = [ [ anynl -42]- 47];
	single_tick			= 39;
	double_tick			= 34;
	percent				= 37;
	
	chars 		 = letter+;
	star 		= (42); 
	string_no_slash = 	[ [ anynl - 64 ] - 47];	// so comment tokens won't be eaten and the
	string_no_star 	= 	[ [ anynl - 64 ] - 42];	// pattern /* and */ won't be tokenized as string
	string_inner 	=	[ [ [ anynl - 64 ] - 42] - 47];
	
	prog_no_slash 	= 	[[ [ [ anynl - 47] -34] -39 ]- 37];	// so comment tokens won't be eaten and the
	prog_no_star 	= 	[[ [ [ anynl - 42] -34] -39 ]- 37];	// pattern /* and */ won't be tokenized as string
	prog_inner 		=	[ [ [ [ anynl  - 42] - 47] -34] -39 ];


//	any 		= [ [ [ [anynl - 10] - 64 ] - '/**'] - '*/'];
States
	pl, pl_slash, pl_star,pl_single_ticks, pl_double_ticks, doc, doc_star, pl_comment, pl_comment_star;
	
Tokens
	 
		//{pl}ignore 				= 	whitespace;
	 	//{pl->doc} doc_start		= 	ops doc_start_comment (star| ops) ;
	 	//{doc->pl}doc_end		= 	ops star end_comment (star | ops) ;
		//{pl}comment_start 		= 	ops normal_comment ops;
	 	//{pl}comment_end			= 	ops end_comment ops;
	 	//string 			=	 ops (string_outer (string_inner* string_outer)* )* ops;
	 	{doc}doc_descr			= 	ops at ( ( d e s c r )| ( d e s c r i p t i o n ) ) whitespace;	
	 	{doc}doc_date			= 	ops at d a t e whitespace;
	 	{doc}doc_author			= 	ops at a u t h o r whitespace;
	 	{doc}doc_atdoc			= 	ops at letter+ whitespace;
	 	{doc}doc_identifier		= 	chars;
	 	//{pl} programm			= 	ops  ( any_no_at? any_no_at? ) | (string_no_star? string_no_slash string_no_star?)* ops; //ops (string_outer (string_inner* string_outer)* )* ops;
		//{doc}string				= 	ops ( any_no_at? any_no_at? ) | (string_no_star? string_no_slash string_no_star? )* ops;//ops (string_outer (string_inner* string_outer)* )* ops;//chars ops;
		
		//{doc} doc_end = end_comment; // return to state 'normal' is done in Lexer
		{doc} string_doc_string = string_no_star*;
		{doc->doc_star} string_doc_star = star;
		
		{doc_star}	string_star_star = star+;
		{doc_star-> doc} string_star_string = string_inner+;
		{doc_star-> pl}	doc_end = '/' ops;
		
		{pl}					programm_no_slash = prog_no_slash;
		{pl}					programm_comment = percent+ any* nl;
		{pl -> pl_slash} 		prorgramm_slash = '/';
		{pl -> pl_single_ticks}	programm_single_ticks = single_tick;
		{pl -> pl_double_ticks}	programm_double_ticks = double_tick;
		
		{pl_slash} 		programm_slash_slash = '/';
		{pl_slash->pl_star} programm_to_star = star;
		{pl_slash->pl}	programm_slash_any = prog_inner;

		
		{pl_star->pl_comment}		programm_star_any = any_no_star;
		{pl_star->doc} 				doc_start = star (star | whitespace)*;
		
		{pl_comment}				comment_no_star = any_no_star*;
		{pl_comment->pl_comment_star}	comment_star = star+;
		
		{pl_comment_star}				comment_star_star = star+;
		{pl_comment_star->pl_comment}	comment_star_no_slash = any_no_slash_no_star+;
		{pl_comment_star->pl}			comment_star_slash = ('/')+;			
		
		{pl_single_ticks} programm_single_string = any_no_single_tick*;
		{pl_single_ticks->pl} programm_single_string_end = single_tick;
		
		{pl_double_ticks} programm_double_string 			= any_no_double_tick*;
		{pl_double_ticks->pl} programm_double_string_end 	= double_tick;
		
Ignored Tokens
		comment_star_slash, comment_star_no_slash, comment_star_star, comment_star, comment_no_star, programm_comment, string_star_star,	programm_to_star, programm_star_any, programm_no_slash, prorgramm_slash, programm_single_ticks, programm_double_ticks, programm_slash_slash, programm_slash_any, programm_single_string, programm_single_string_end, programm_double_string, programm_double_string_end;



Productions
	
	start{-> ast} =		{start} docs* 		{-> New ast.start( [docs.ast]) };
	
	docs {-> ast} = 	{doc} 	doc_start doc doc_end {-> doc.ast };

	
	doc {-> ast}	 = 	{optional_rules} entries*	{-> New ast.entries( [entries.ast] ) };					

	entries	{-> ast} = 	  {author}	author 		{-> author.ast} 
						| {date}	date 		{-> date.ast}
						| {descr}	descr 		{-> descr.ast}
						| {atdoc}	doc_atdoc string+ {-> New ast.at_doc( doc_atdoc, [string.ast] ) };
	
	author 	{-> ast} =	{author} doc_author string+ 	{-> New ast.author( [string.ast] )};
	date 	{-> ast} =	{date} doc_date string+ 		{-> New ast.date( [string.ast] )};
	descr 	{-> ast} = 	{descr} doc_descr string+ 	{->New ast.descr( [string.ast] ) };			

	string{-> ast} = 	{simple} 		string_doc_string {-> New ast.string_a(string_doc_string) }
					|	{star}			string_doc_star {-> New ast.string_b(string_doc_star) }
					|	{after_star} 	string_star_string {-> New ast.string_c(string_star_string)};

Abstract Syntax Tree
	ast = 	{start}  ast*
		|	{doc}	ast
		|	{entries} ast*
		|	{author} ast*
		|	{date} ast*
		| 	{descr} ast+
		|	{at_doc} [identifier]: doc_atdoc [description]:ast* 
		|	{string_a} 	string_doc_string 
		| 	{string_b}	string_doc_star
		|	{string_c}	string_star_string;




