/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ADocAst extends PAst
{
    private TString _aut_;
    private TString _dat_;
    private final LinkedList<TString> _des_ = new LinkedList<TString>();

    public ADocAst()
    {
        // Constructor
    }

    public ADocAst(
        @SuppressWarnings("hiding") TString _aut_,
        @SuppressWarnings("hiding") TString _dat_,
        @SuppressWarnings("hiding") List<?> _des_)
    {
        // Constructor
        setAut(_aut_);

        setDat(_dat_);

        setDes(_des_);

    }

    @Override
    public Object clone()
    {
        return new ADocAst(
            cloneNode(this._aut_),
            cloneNode(this._dat_),
            cloneList(this._des_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADocAst(this);
    }

    public TString getAut()
    {
        return this._aut_;
    }

    public void setAut(TString node)
    {
        if(this._aut_ != null)
        {
            this._aut_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aut_ = node;
    }

    public TString getDat()
    {
        return this._dat_;
    }

    public void setDat(TString node)
    {
        if(this._dat_ != null)
        {
            this._dat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dat_ = node;
    }

    public LinkedList<TString> getDes()
    {
        return this._des_;
    }

    public void setDes(List<?> list)
    {
        for(TString e : this._des_)
        {
            e.parent(null);
        }
        this._des_.clear();

        for(Object obj_e : list)
        {
            TString e = (TString) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._des_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aut_)
            + toString(this._dat_)
            + toString(this._des_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aut_ == child)
        {
            this._aut_ = null;
            return;
        }

        if(this._dat_ == child)
        {
            this._dat_ = null;
            return;
        }

        if(this._des_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aut_ == oldChild)
        {
            setAut((TString) newChild);
            return;
        }

        if(this._dat_ == oldChild)
        {
            setDat((TString) newChild);
            return;
        }

        for(ListIterator<TString> i = this._des_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TString) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
