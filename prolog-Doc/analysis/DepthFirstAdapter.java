/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPAst().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStartSingleAst(AStartSingleAst node)
    {
        defaultIn(node);
    }

    public void outAStartSingleAst(AStartSingleAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartSingleAst(AStartSingleAst node)
    {
        inAStartSingleAst(node);
        if(node.getAst() != null)
        {
            node.getAst().apply(this);
        }
        outAStartSingleAst(node);
    }

    public void inAStartAst(AStartAst node)
    {
        defaultIn(node);
    }

    public void outAStartAst(AStartAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartAst(AStartAst node)
    {
        inAStartAst(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAStartAst(node);
    }

    public void inADocAst(ADocAst node)
    {
        defaultIn(node);
    }

    public void outADocAst(ADocAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADocAst(ADocAst node)
    {
        inADocAst(node);
        if(node.getAut() != null)
        {
            node.getAut().apply(this);
        }
        if(node.getDat() != null)
        {
            node.getDat().apply(this);
        }
        {
            List<TString> copy = new ArrayList<TString>(node.getDes());
            for(TString e : copy)
            {
                e.apply(this);
            }
        }
        outADocAst(node);
    }
}
