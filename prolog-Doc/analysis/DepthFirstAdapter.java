/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPAst().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStartAst(AStartAst node)
    {
        defaultIn(node);
    }

    public void outAStartAst(AStartAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartAst(AStartAst node)
    {
        inAStartAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAStartAst(node);
    }

    public void inADocAst(ADocAst node)
    {
        defaultIn(node);
    }

    public void outADocAst(ADocAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADocAst(ADocAst node)
    {
        inADocAst(node);
        if(node.getAst() != null)
        {
            node.getAst().apply(this);
        }
        outADocAst(node);
    }

    public void inAEntriesAst(AEntriesAst node)
    {
        defaultIn(node);
    }

    public void outAEntriesAst(AEntriesAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntriesAst(AEntriesAst node)
    {
        inAEntriesAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAEntriesAst(node);
    }

    public void inAAuthorAst(AAuthorAst node)
    {
        defaultIn(node);
    }

    public void outAAuthorAst(AAuthorAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuthorAst(AAuthorAst node)
    {
        inAAuthorAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAAuthorAst(node);
    }

    public void inADateAst(ADateAst node)
    {
        defaultIn(node);
    }

    public void outADateAst(ADateAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateAst(ADateAst node)
    {
        inADateAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outADateAst(node);
    }

    public void inAModeAst(AModeAst node)
    {
        defaultIn(node);
    }

    public void outAModeAst(AModeAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModeAst(AModeAst node)
    {
        inAModeAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAModeAst(node);
    }

    public void inADescrAst(ADescrAst node)
    {
        defaultIn(node);
    }

    public void outADescrAst(ADescrAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADescrAst(ADescrAst node)
    {
        inADescrAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outADescrAst(node);
    }

    public void inALabelAst(ALabelAst node)
    {
        defaultIn(node);
    }

    public void outALabelAst(ALabelAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelAst(ALabelAst node)
    {
        inALabelAst(node);
        {
            List<PAst> copy = new ArrayList<PAst>(node.getAst());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outALabelAst(node);
    }

    public void inAAtDocAst(AAtDocAst node)
    {
        defaultIn(node);
    }

    public void outAAtDocAst(AAtDocAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtDocAst(AAtDocAst node)
    {
        inAAtDocAst(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAst> copy = new ArrayList<PAst>(node.getDescription());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAAtDocAst(node);
    }

    public void inASingleAtDocAst(ASingleAtDocAst node)
    {
        defaultIn(node);
    }

    public void outASingleAtDocAst(ASingleAtDocAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAtDocAst(ASingleAtDocAst node)
    {
        inASingleAtDocAst(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PAst> copy = new ArrayList<PAst>(node.getDescription());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outASingleAtDocAst(node);
    }

    public void inAStringAAst(AStringAAst node)
    {
        defaultIn(node);
    }

    public void outAStringAAst(AStringAAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringAAst(AStringAAst node)
    {
        inAStringAAst(node);
        if(node.getStringDocString() != null)
        {
            node.getStringDocString().apply(this);
        }
        outAStringAAst(node);
    }

    public void inAStringBAst(AStringBAst node)
    {
        defaultIn(node);
    }

    public void outAStringBAst(AStringBAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringBAst(AStringBAst node)
    {
        inAStringBAst(node);
        if(node.getStringDocStar() != null)
        {
            node.getStringDocStar().apply(this);
        }
        outAStringBAst(node);
    }

    public void inAStringCAst(AStringCAst node)
    {
        defaultIn(node);
    }

    public void outAStringCAst(AStringCAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringCAst(AStringCAst node)
    {
        inAStringCAst(node);
        if(node.getStringStarString() != null)
        {
            node.getStringStarString().apply(this);
        }
        outAStringCAst(node);
    }

    public void inAStringDAst(AStringDAst node)
    {
        defaultIn(node);
    }

    public void outAStringDAst(AStringDAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDAst(AStringDAst node)
    {
        inAStringDAst(node);
        if(node.getDocMail() != null)
        {
            node.getDocMail().apply(this);
        }
        outAStringDAst(node);
    }

    public void inAStringEAst(AStringEAst node)
    {
        defaultIn(node);
    }

    public void outAStringEAst(AStringEAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringEAst(AStringEAst node)
    {
        inAStringEAst(node);
        if(node.getDocAt() != null)
        {
            node.getDocAt().apply(this);
        }
        outAStringEAst(node);
    }

    public void inAStringFAst(AStringFAst node)
    {
        defaultIn(node);
    }

    public void outAStringFAst(AStringFAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringFAst(AStringFAst node)
    {
        inAStringFAst(node);
        if(node.getDocSingleString() != null)
        {
            node.getDocSingleString().apply(this);
        }
        outAStringFAst(node);
    }

    public void inAStringGAst(AStringGAst node)
    {
        defaultIn(node);
    }

    public void outAStringGAst(AStringGAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringGAst(AStringGAst node)
    {
        inAStringGAst(node);
        if(node.getSingleDocMail() != null)
        {
            node.getSingleDocMail().apply(this);
        }
        outAStringGAst(node);
    }

    public void inAUserAst(AUserAst node)
    {
        defaultIn(node);
    }

    public void outAUserAst(AUserAst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserAst(AUserAst node)
    {
        inAUserAst(node);
        if(node.getUser() != null)
        {
            node.getUser().apply(this);
        }
        {
            List<PAst> copy = new ArrayList<PAst>(node.getEntries());
            for(PAst e : copy)
            {
                e.apply(this);
            }
        }
        outAUserAst(node);
    }
}
