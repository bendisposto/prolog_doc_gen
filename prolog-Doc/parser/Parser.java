/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAstartstart1Start */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAstartstart2Start */
		    {
			ArrayList<Object> list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce ADocDocs */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAsingledocdocs1Docs */
		    {
			ArrayList<Object> list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AAsingledocdocs2Docs */
		    {
			ArrayList<Object> list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAoptionalrulesdoc1Doc */
		    {
			ArrayList<Object> list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AAoptionalrulesdoc2Doc */
		    {
			ArrayList<Object> list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AAnopredefineddoc1Doc */
		    {
			ArrayList<Object> list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AAnopredefineddoc2Doc */
		    {
			ArrayList<Object> list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AUserUser */
		    {
			ArrayList<Object> list = new9();
			push(goTo(3), list);
		    }
		    break;
                    case 10: /* reduce AAuthorEntries */
		    {
			ArrayList<Object> list = new10();
			push(goTo(4), list);
		    }
		    break;
                    case 11: /* reduce ADateEntries */
		    {
			ArrayList<Object> list = new11();
			push(goTo(4), list);
		    }
		    break;
                    case 12: /* reduce AModeEntries */
		    {
			ArrayList<Object> list = new12();
			push(goTo(4), list);
		    }
		    break;
                    case 13: /* reduce ADescrEntries */
		    {
			ArrayList<Object> list = new13();
			push(goTo(4), list);
		    }
		    break;
                    case 14: /* reduce AAtdocEntries */
		    {
			ArrayList<Object> list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce ASingleAtdocEntries */
		    {
			ArrayList<Object> list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce AAuthorAuthor */
		    {
			ArrayList<Object> list = new16();
			push(goTo(5), list);
		    }
		    break;
                    case 17: /* reduce ASingleAuthorAuthor */
		    {
			ArrayList<Object> list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce ADateDate */
		    {
			ArrayList<Object> list = new18();
			push(goTo(6), list);
		    }
		    break;
                    case 19: /* reduce ASingleDateDate */
		    {
			ArrayList<Object> list = new19();
			push(goTo(6), list);
		    }
		    break;
                    case 20: /* reduce ADateMode */
		    {
			ArrayList<Object> list = new20();
			push(goTo(7), list);
		    }
		    break;
                    case 21: /* reduce ASingleDateMode */
		    {
			ArrayList<Object> list = new21();
			push(goTo(7), list);
		    }
		    break;
                    case 22: /* reduce ADescrDescr */
		    {
			ArrayList<Object> list = new22();
			push(goTo(8), list);
		    }
		    break;
                    case 23: /* reduce ASingleDescrDescr */
		    {
			ArrayList<Object> list = new23();
			push(goTo(8), list);
		    }
		    break;
                    case 24: /* reduce ASimpleString */
		    {
			ArrayList<Object> list = new24();
			push(goTo(9), list);
		    }
		    break;
                    case 25: /* reduce AStarString */
		    {
			ArrayList<Object> list = new25();
			push(goTo(9), list);
		    }
		    break;
                    case 26: /* reduce AAfterStarString */
		    {
			ArrayList<Object> list = new26();
			push(goTo(9), list);
		    }
		    break;
                    case 27: /* reduce AMailString */
		    {
			ArrayList<Object> list = new27();
			push(goTo(9), list);
		    }
		    break;
                    case 28: /* reduce AAtString */
		    {
			ArrayList<Object> list = new28();
			push(goTo(9), list);
		    }
		    break;
                    case 29: /* reduce ASingleDocString */
		    {
			ArrayList<Object> list = new29();
			push(goTo(9), list);
		    }
		    break;
                    case 30: /* reduce ASingleMailString */
		    {
			ArrayList<Object> list = new30();
			push(goTo(9), list);
		    }
		    break;
                    case 31: /* reduce ATerminal$Docs */
		    {
			ArrayList<Object> list = new31();
			push(goTo(10), list);
		    }
		    break;
                    case 32: /* reduce ANonTerminal$Docs */
		    {
			ArrayList<Object> list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce ATerminal$Entries */
		    {
			ArrayList<Object> list = new33();
			push(goTo(11), list);
		    }
		    break;
                    case 34: /* reduce ANonTerminal$Entries */
		    {
			ArrayList<Object> list = new34();
			push(goTo(11), list);
		    }
		    break;
                    case 35: /* reduce ATerminal$String */
		    {
			ArrayList<Object> list = new35();
			push(goTo(12), list);
		    }
		    break;
                    case 36: /* reduce ANonTerminal$String */
		    {
			ArrayList<Object> list = new36();
			push(goTo(12), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAst node1 = (PAst) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstartstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pastNode1 = new AStartAst(listNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstartstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AStartAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADocDocs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAsingledocdocs1Docs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAsingledocdocs2Docs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList2.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAoptionalrulesdoc1Doc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pastNode1 = new AEntriesAst(listNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAoptionalrulesdoc2Doc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AEntriesAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAnopredefineddoc1Doc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pastNode2 = (PAst)nodeArrayList1.get(0);
        {
            // Block
        }

        pastNode1 = new AUserAst(pastNode2, listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAnopredefineddoc2Doc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        PAst pastNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pastNode2 = (PAst)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pastNode1 = new AUserAst(pastNode2, listNode4);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AUserUser */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new ADescrAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAuthorEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADateEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AModeEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADescrEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAtdocEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TDocAtdoc tdocatdocNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tdocatdocNode2 = (TDocAtdoc)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pastNode1 = new AAtDocAst(tdocatdocNode2, listNode4);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASingleAtdocEntries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TSingleDocAtdoc tsingledocatdocNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tsingledocatdocNode2 = (TSingleDocAtdoc)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pastNode1 = new ASingleAtDocAst(tsingledocatdocNode2, listNode4);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAuthorAuthor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AAuthorAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASingleAuthorAuthor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AAuthorAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADateDate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new ADateAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASingleDateDate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new ADateAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADateMode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AModeAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASingleDateMode */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new AModeAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ADescrDescr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new ADescrAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASingleDescrDescr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pastNode1 = new ADescrAst(listNode3);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASimpleString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TStringDocString tstringdocstringNode2;
        tstringdocstringNode2 = (TStringDocString)nodeArrayList1.get(0);

        pastNode1 = new AStringAAst(tstringdocstringNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AStarString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TStringDocStar tstringdocstarNode2;
        tstringdocstarNode2 = (TStringDocStar)nodeArrayList1.get(0);

        pastNode1 = new AStringBAst(tstringdocstarNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAfterStarString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TStringStarString tstringstarstringNode2;
        tstringstarstringNode2 = (TStringStarString)nodeArrayList1.get(0);

        pastNode1 = new AStringCAst(tstringstarstringNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMailString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TDocMail tdocmailNode2;
        tdocmailNode2 = (TDocMail)nodeArrayList1.get(0);

        pastNode1 = new AStringDAst(tdocmailNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAtString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TDocAt tdocatNode2;
        tdocatNode2 = (TDocAt)nodeArrayList1.get(0);

        pastNode1 = new AStringEAst(tdocatNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASingleDocString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TDocSingleString tdocsinglestringNode2;
        tdocsinglestringNode2 = (TDocSingleString)nodeArrayList1.get(0);

        pastNode1 = new AStringFAst(tdocsinglestringNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASingleMailString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAst pastNode1;
        {
            // Block
        TSingleDocMail tsingledocmailNode2;
        tsingledocmailNode2 = (TSingleDocMail)nodeArrayList1.get(0);

        pastNode1 = new AStringGAst(tsingledocmailNode2);
        }
	nodeList.add(pastNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATerminal$Docs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	if(pastNode1 != null)
	{
	  listNode2.add(pastNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ANonTerminal$Docs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAst pastNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pastNode2 = (PAst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pastNode2 != null)
	{
	  listNode3.add(pastNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATerminal$Entries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	if(pastNode1 != null)
	{
	  listNode2.add(pastNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANonTerminal$Entries */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAst pastNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pastNode2 = (PAst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pastNode2 != null)
	{
	  listNode3.add(pastNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATerminal$String */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAst pastNode1;
        pastNode1 = (PAst)nodeArrayList1.get(0);
	if(pastNode1 != null)
	{
	  listNode2.add(pastNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANonTerminal$String */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAst pastNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pastNode2 = (PAst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pastNode2 != null)
	{
	  listNode3.add(pastNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {12, SHIFT, 1}, {13, SHIFT, 2}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, {17, SHIFT, 18}, {18, SHIFT, 19}, {19, SHIFT, 20}, {20, SHIFT, 21}, {21, SHIFT, 22}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, {17, SHIFT, 18}, {18, SHIFT, 19}, {19, SHIFT, 20}, {20, SHIFT, 21}, {21, SHIFT, 22}, },
			{{-1, ERROR, 3}, {22, ACCEPT, -1}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 1}, {12, SHIFT, 1}, {13, SHIFT, 2}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 8}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 9}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 10}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 11}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 12}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 18}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 19}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 20}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 21}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 22}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, ERROR, 23}, {11, SHIFT, 45}, },
			{{-1, REDUCE, 7}, {2, SHIFT, 8}, {3, SHIFT, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {17, SHIFT, 18}, {18, SHIFT, 19}, {19, SHIFT, 20}, {20, SHIFT, 21}, {21, SHIFT, 22}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 6}, {2, SHIFT, 8}, {3, SHIFT, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {17, SHIFT, 18}, {18, SHIFT, 19}, {19, SHIFT, 20}, {20, SHIFT, 21}, {21, SHIFT, 22}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 3}, {15, SHIFT, 49}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 22}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 18}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 23}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 17}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 21}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 6}, {1, SHIFT, 7}, {8, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {14, SHIFT, 16}, {16, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 8}, {3, SHIFT, 9}, {4, SHIFT, 10}, {5, SHIFT, 11}, {6, SHIFT, 12}, {17, SHIFT, 18}, {18, SHIFT, 19}, {19, SHIFT, 20}, {20, SHIFT, 21}, {21, SHIFT, 22}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 4}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 34}, },
			{{-1, 23}, {2, 33}, },
			{{-1, 24}, },
			{{-1, 25}, {31, 47}, {46, 47}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, {32, 48}, {35, 48}, {36, 48}, {37, 48}, {38, 48}, {39, 48}, {40, 48}, {41, 48}, {42, 48}, {43, 48}, {44, 48}, },
			{{-1, 5}, },
			{{-1, 31}, {24, 46}, },
			{{-1, 32}, {8, 35}, {9, 36}, {10, 37}, {11, 38}, {12, 39}, {18, 40}, {19, 41}, {20, 42}, {21, 43}, {22, 44}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: doc start, single doc start, EOF",
			"expecting: doc at, doc mail, doc descr, doc date, doc author, doc mode, doc atdoc, string doc string, string doc star, string star string, doc end, doc single string, single doc mail, single doc descr, single doc date, single doc author, single doc mode, single doc atdoc",
			"expecting: doc at, doc mail, doc descr, doc date, doc author, doc mode, doc atdoc, string doc string, string doc star, string star string, doc start, single doc start, doc single string, doc single end, single doc mail, single doc descr, single doc date, single doc author, single doc mode, single doc atdoc, EOF",
			"expecting: EOF",
			"expecting: doc at, doc mail, doc descr, doc date, doc author, doc mode, doc atdoc, string doc string, string doc star, string star string, doc end, doc start, single doc start, doc single string, doc single end, single doc mail, single doc descr, single doc date, single doc author, single doc mode, single doc atdoc, EOF",
			"expecting: doc at, doc mail, string doc string, string doc star, string star string, doc single string, single doc mail",
			"expecting: doc end",
			"expecting: doc descr, doc date, doc author, doc mode, doc atdoc, doc end, doc start, single doc start, doc single end, single doc descr, single doc date, single doc author, single doc mode, single doc atdoc, EOF",
			"expecting: doc start, single doc start, doc single end, EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 0, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 4, 7, 4, 8, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 7, 4, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
